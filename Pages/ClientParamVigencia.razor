@page "/parametros"
@using PruebaBlazor.Models.CLI.CliClient
@using PruebaBlazor.Models.CLI.CliClientParamVigencias
@using PruebaBlazor.Components
@using PruebaBlazor.Services
@inject ICrudService<CliClientesParamVigenciasDAO, CliClientesParamVigenciasPK, CliClientesParamVigenciasSaveDAO> _parametrosService
@inject ICrudService<CliClienteDAO, CliClientesPK, CliClienteSaveDAO> _clientesService
@inject IJSRuntime JSRuntime

<PageToolbar 
    Title="Parámetros de Clientes"
    ShowAddButton="true"
    ShowSearch="true"
    SearchPlaceholder="Buscar parámetro..."
    OnAddClick="AgregarNuevoRegistro"
    OnSearch="BuscarParametros" />

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else
{
    <TablaCRUD 
        TItem="CliClientesParamVigenciasDAO"
        TKey="CliClientesParamVigenciasPK"
        Items="parametros"
        KeySelector="item => item.Id"
        IsNewItemFunc="item => item.Id.Codigo == 0"
        IsLoading="isLoading"
        OnEdit="EditarRegistro"
        OnSave="ConfirmarRegistro"
        OnDelete="EliminarRegistro"
        OnBulkDelete="EliminarSeleccionados"
        OnCancelEdit="CancelarRegistro"
        Columns="columnas" />
}

@code {
    private List<CliClientesParamVigenciasDAO> parametros;
    private List<CliClienteDAO> clientes = new();
    private bool isLoading = true;
    private string filtroTexto = string.Empty;
    private List<TablaCRUD<CliClientesParamVigenciasDAO, CliClientesParamVigenciasPK>.TableColumn<CliClientesParamVigenciasDAO>> columnas;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
        ConfigurarColumnas();
    }

    private async Task CargarDatos()
    {
        isLoading = true;
        try
        {
            parametros = await _parametrosService.GetAllAsync();
            clientes = await _clientesService.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando datos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ConfigurarColumnas()
    {
        columnas = new List<TablaCRUD<CliClientesParamVigenciasDAO, CliClientesParamVigenciasPK>.TableColumn<CliClientesParamVigenciasDAO>>
        {
            new() {
                Title = "ID",
                GetValue = item => item.Id.Codigo,
                SetValue = (item, value) => {
                    if (long.TryParse(value?.ToString(), out long codigo))
                        item.Id.Codigo = codigo;
                },
                EditorType = TablaCRUD<CliClientesParamVigenciasDAO, CliClientesParamVigenciasPK>.EditorType.Number
            },
            new() {
                Title = "Cliente",
                GetValue = item => item.Cliente?.Nombres ?? "",
                // Aquí podemos usar un selector personalizado o un simple campo de texto
                // dependiendo de los requerimientos
                EditTemplate = item => item.Id.Codigo == 0 ? 
                    @<EntitySelector 
                        TItem="CliClienteDAO"
                        TValue="long"
                        Items="clientes"
                        Value="@item.Cliente?.Id.Codigo"
                        ValueSelector="c => c.Id.Codigo"
                        DisplaySelector="c => c.Nombres"
                        ValueChanged="newValue => ClienteSeleccionado(item, newValue)" /> :
                    @<input type="text" class="form-control" value="@item.Cliente?.Nombres" disabled />
            },
            new() {
                Title = "Valor",
                GetValue = item => item.ValorParametro,
                SetValue = (item, value) => item.ValorParametro = value?.ToString(),
                EditorType = TablaCRUD<CliClientesParamVigenciasDAO, CliClientesParamVigenciasPK>.EditorType.Text
            },
            new() {
                Title = "Desde",
                GetValue = item => item.FechaDesde.ToShortDateString(),
                SetValue = (item, value) => {
                    if (DateTime.TryParse(value?.ToString(), out DateTime fecha))
                        item.FechaDesde = fecha;
                },
                EditorType = TablaCRUD<CliClientesParamVigenciasDAO, CliClientesParamVigenciasPK>.EditorType.Date
            },
            new() {
                Title = "Hasta",
                GetValue = item => item.FechaHasta.ToShortDateString(),
                SetValue = (item, value) => {
                    if (DateTime.TryParse(value?.ToString(), out DateTime fecha))
                        item.FechaHasta = fecha;
                },
                EditorType = TablaCRUD<CliClientesParamVigenciasDAO, CliClientesParamVigenciasPK>.EditorType.Date
            },
            new() {
                Title = "Observación",
                GetValue = item => item.Observacion,
                SetValue = (item, value) => item.Observacion = value?.ToString(),
                EditorType = TablaCRUD<CliClientesParamVigenciasDAO, CliClientesParamVigenciasPK>.EditorType.TextArea,
                TextAreaRows = 2
            },
            new() {
                Title = "Estado",
                GetValue = item => item.Estado == "A" ? "Activo" : "Inactivo",
                SetValue = (item, value) => {
                    if (value is bool isActive)
                        item.Estado = isActive ? "A" : "I";
                },
                EditorType = TablaCRUD<CliClientesParamVigenciasDAO, CliClientesParamVigenciasPK>.EditorType.CheckBox
            }
        };
    }

    private void ClienteSeleccionado(CliClientesParamVigenciasDAO item, long codigoCliente)
    {
        var cliente = clientes.FirstOrDefault(c => c.Id.Codigo == codigoCliente);
        if (cliente != null)
        {
            item.Cliente = cliente;
            item.Id.CliClientCodigo = (int)cliente.Id.Codigo;
            item.Id.CliClientAgeLicencCodigo = cliente.Id.AgeLicencCodigo;
            item.Id.CLIParGeCodigo = 1;
        }
    }

    private void AgregarNuevoRegistro()
    {
        var nuevo = new CliClientesParamVigenciasDAO
        {
            Estado = "A",
            Observacion = "",
            FechaDesde = DateTime.Today,
            FechaHasta = DateTime.Today.AddMonths(1),
            ValorParametro = "",
            Id = new CliClientesParamVigenciasPK
            {
                CliClientCodigo = 0,
                CliClientAgeLicencCodigo = 0,
                CLIParGeCodigo = 0,
                Codigo = 0
            },
            Cliente = new CliClienteDAO
            {
                Id = new CliClientesPK { Codigo = 0, AgeLicencCodigo = 0 },
                Nombres = ""
            }
        };

        parametros.Insert(0, nuevo);
    }

    private void EditarRegistro(CliClientesParamVigenciasDAO item)
    {
        // La lógica de edición es manejada por el componente
    }

    private async Task ConfirmarRegistro(CliClientesParamVigenciasDAO item)
    {
        try {
            var saveModel = new CliClientesParamVigenciasSaveDAO
            {
                Id = item.Id,
                Observacion = item.Observacion,
                FechaDesde = item.FechaDesde,
                FechaHasta = item.FechaHasta,
                Estado = item.Estado,
                ValorParametro = item.ValorParametro,
                UsuarioIngreso = item.Id.Codigo == 0 ? 1 : 0,
                UsuarioModificacion = item.Id.Codigo == 0 ? 0 : 1,
            };

            if (item.Id.Codigo == 0)
                await _parametrosService.CreateAsync(saveModel);
            else
                await _parametrosService.UpdateAsync(saveModel);
                
            await CargarDatos(); // Recargar datos después de guardar
        }
        catch (Exception ex) {
            Console.WriteLine($"Error guardando: {ex.Message}");
            // Manejar el error
        }
    }

    private async Task EliminarRegistro(CliClientesParamVigenciasDAO item)
    {
        item.Estado = "N";
        await ConfirmarRegistro(item);
    }

    private async Task EliminarSeleccionados(List<CliClientesParamVigenciasDAO> items)
    {
        var registrosSave = items.Select(item => new CliClientesParamVigenciasSaveDAO
        {
            Id = item.Id,
            Estado = "N",
            UsuarioModificacion = 1,
            // Copiar otros campos necesarios
        }).ToList();

        try {
            await _parametrosService.BulkDeleteAsync(registrosSave);
            await CargarDatos(); // Recargar datos después de eliminar
        }
        catch (Exception ex) {
            Console.WriteLine($"Error eliminando registros: {ex.Message}");
            // Manejar el error
        }
    }

    private void CancelarRegistro(CliClientesParamVigenciasDAO item)
    {
        if (item.Id.Codigo == 0)
            parametros.Remove(item); // Eliminar el item nuevo sin guardar
    }

    private async Task BuscarParametros(string filtro)
    {
        if (string.IsNullOrWhiteSpace(filtro))
        {
            await CargarDatos(); // Recargar todos los datos
            return;
        }

        isLoading = true;
        try
        {
            parametros = await _parametrosService.SearchAsync(filtro);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error buscando: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}